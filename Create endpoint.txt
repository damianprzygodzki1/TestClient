Generate a react form with 4 text inputs and business style css

ChatGPT
Sure, here's a simple React form with 4 text inputs, complete with "business style" CSS:

React Component:
jsx
Copy code
import React, { useState } from 'react';
import './BusinessForm.css';

function BusinessForm() {
    const [formData, setFormData] = useState({
        field1: '',
        field2: '',
        field3: '',
        field4: '',
    });

    const handleInputChange = (e) => {
        const { name, value } = e.target;
        setFormData((prev) => ({
            ...prev,
            [name]: value
        }));
    }

    const handleSubmit = (e) => {
        e.preventDefault();
        console.log(formData);
    }

    return (
        <div className="business-form-container">
            <form onSubmit={handleSubmit}>
                <input
                    type="text"
                    name="field1"
                    placeholder="Field 1"
                    value={formData.field1}
                    onChange={handleInputChange}
                    className="business-input"
                />
                <input
                    type="text"
                    name="field2"
                    placeholder="Field 2"
                    value={formData.field2}
                    onChange={handleInputChange}
                    className="business-input"
                />
                <input
                    type="text"
                    name="field3"
                    placeholder="Field 3"
                    value={formData.field3}
                    onChange={handleInputChange}
                    className="business-input"
                />
                <input
                    type="text"
                    name="field4"
                    placeholder="Field 4"
                    value={formData.field4}
                    onChange={handleInputChange}
                    className="business-input"
                />
                <button type="submit" className="business-btn">Submit</button>
            </form>
        </div>
    );
}

export default BusinessForm;
CSS (BusinessForm.css):
css
Copy code
.business-form-container {
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    background-color: #f5f7f9;
    padding: 20px;
}

.business-input {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
    border: 1px solid #ced4da;
    border-radius: 5px;
    font-size: 16px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.05);
}

.business-btn {
    padding: 10px 20px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

.business-btn:hover {
    background-color: #0056b3;
}
You can enhance the styles further by using a CSS framework like Bootstrap or Tailwind CSS for a more refined look. Also, consider adding better state management, validation, and other functionalities based on your requirements.




User
Generate a Javascript service using axios to fetch data from API https://restcountries.com/v3.1/all
ChatGPT
To create a JavaScript service using Axios to fetch data from the provided API, follow these steps:

First, you need to install axios. If you're using npm:
Copy code
npm install axios
Create a service file, for instance countryService.js.

Inside the countryService.js file:

javascript
Copy code
import axios from 'axios';

const BASE_URL = 'https://restcountries.com/v3.1';

const getAllCountries = async () => {
    try {
        const response = await axios.get(`${BASE_URL}/all`);
        return response.data;
    } catch (error) {
        console.error("Error fetching countries:", error);
        throw error;
    }
};

export default {
    getAllCountries
};
Usage:
Now, to use this service in any part of your JavaScript or React code, you can import and call the getAllCountries function:

javascript
Copy code
import countryService from './countryService';

const fetchData = async () => {
    try {
        const countries = await countryService.getAllCountries();
        console.log(countries);
    } catch (error) {
        console.error("Error:", error);
    }
};

fetchData();
This code provides a basic structure to interact with the RestCountries API using Axios. You can expand upon this by adding more functions for other endpoints or adding error handling and other functionalities as needed.




User
Add unit test for this service
ChatGPT
To create a unit test for the service, we'll use the popular jest testing framework and the axios-mock-adapter library to mock Axios requests.

First, install the required packages:
bash
Copy code
npm install jest axios-mock-adapter --save-dev
Set up Jest. If you're using Create React App, Jest will already be set up for you. If not, you'll need to configure it. You can add a jest.config.js file at the root of your project or add configurations in your package.json.

Now, create a test file for the service, for instance countryService.test.js.

Write the test:

javascript
Copy code
import axios from 'axios';
import MockAdapter from 'axios-mock-adapter';
import countryService from './countryService';

describe('countryService', () => {
    var mock = new MockAdapter(axios);

    afterEach(() => {
        mock.reset();
    });

    it('getAllCountries should fetch all countries', async () => {
        const mockData = [{
            name: { common: "Afghanistan" },
            // ...other country data
        }];

        mock.onGet('https://restcountries.com/v3.1/all').reply(200, mockData);

        const countries = await countryService.getAllCountries();

        expect(countries).toEqual(mockData);
    });

    it('getAllCountries should handle errors', async () => {
        mock.onGet('https://restcountries.com/v3.1/all').reply(500);

        await expect(countryService.getAllCountries()).rejects.toThrow();
    });
});
Run the tests:
bash
Copy code
npx jest
In this setup, axios-mock-adapter is used to mock Axios's request/response behavior. We've defined two test cases:

One where the API responds with a 200 status and mock data. The service should then return the mock data.
Another where the API responds with a 500 status, simulating a server error. The service should throw an error in this case.
Remember, unit tests should be isolated and not make actual HTTP requests. That's why mocking is essential.